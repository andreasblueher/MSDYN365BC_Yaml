# File: CompileALApps.yml

steps:
- powershell: |
   Import-Module NVRAppDevOps -DisableNameChecking
   Import-Module navcontainerhelper -DisableNameChecking
   
   $Config = Get-Content (-join($env:ConfigFolder,"\config.json")) | ConvertFrom-JSON
   
   if ($CertPath) {
     Install-NAVSipCryptoProviderFromNavContainer -containerName $Config.ContainerName
   }
   
   Write-Host $Config.AllApps.Count
   
   # If changed apps haven't been defined simply set them to all apps
   if (-not $Config.ChangedApps) {
     $Config.ChangedApps = $Config.AllApps
     Write-Host "Set ChangedApps to AllApps"
   } else {
     Write-Host "Skip setting ChangedApps"
   }
   
   $sortedApps = @()
   $scannedApp = @{}
   
   function getAppString($appJson) {
     return "$($appJson.publisher)_$($appJson.name)_$($appJson.version).app"
   }
   
   function checkApp($appJson) {
     Write-Host $appJson.dependencies.Count
     Write-Host $appJson.dependencies
     Write-Host $appJson.dependencies.GetType()
     #example dependency { "appId": "4805fd15-75a5-46a2-952f-39c1c4eab821", "name": "WeatherLibrary", "publisher": "Microsoft", "version": "1.0.0.0"}
     foreach ($dependency in $apps.dependencies) {
       Write-Host $dependency
       if (-not $dependency) {
         Write-Host "Komisch"
         return;
       }
       Write-Host "Dependency $(getAppSTring($dependency))"
       if ($dependency.publisher -eq "Microsoft") {
         return;
       }

       if ($Script:scannedApp.Contains((getAppString($dependency)))) {
         return;
       } else {
         if ($dependency.dependencies.Count -eq 0) {
           Write-Host "here we go"
           $Script:sortedApps += $dependency;
           $Script:scannedAppApps.Add((getAppString($dependency)))
         } else {
           Write-Host "Checking further dependencies"
           checkApp($dependency);
         }
       }
     }
   }

   foreach ($changedApp in $Config.ChangedApps) {
     Write-Host $(getAppString($changedApp))
     checkApp($changedApp)
   }

   #$Config | Compile-ALProjectTree -OrderedApps (Get-ALBuildOrder $Config.AppCollection) -PackagesPath $Config.RepoPath
   
   #$Config.AppCollection | % {
   #  copy-item -Path (Join-Path $Config.RepoPath '*.app') -Destination $env:Build_ArtifactStagingDirectory -Filter "*_$($_.AppName)_*.app"
   #  copy-item -Path (Join-Path $Config.RepoPath '*.app') -Destination $env:Build_ArtifactStagingDirectory -Filter "*_$($_.TestAppName)_*.app"
   #}
   
  displayName: 'Compile AL Apps'
