# File: PrepareEnv.yml

steps:
- powershell: |
   Import-Module NVRAppDevOps -DisableNameChecking
   Import-Module navcontainerhelper -DisableNameChecking

   if(!([String]::IsNullOrEmpty("$(CertFile)")) -and (!([String]::IsNullOrEmpty("$(CertSecret)"))))
   {
     Write-Error "You can only specify CertFile or CertSecret not both at the same time."
     exit 1
   }

   if("$(CertSecret)")
   {
    $TmpFile = (New-TemporaryFile | Rename-Item -NewName { $_ -replace 'tmp$', 'pfx' } -PassThru).Fullname
    Write-Host "##vso[task.setvariable variable=CertFile]$TmpFile"
    $pfxUnprotectedBytes = [Convert]::FromBase64String("$(CertSecret)")
    $pfx = New-Object Security.Cryptography.X509Certificates.X509Certificate2
    $pfx.Import($pfxUnprotectedBytes, $null, [Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
    $pfxProtectedBytes = $pfx.Export([Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12, "$(CertPwd)")
    Write-Host $TmpFile
    [IO.File]::WriteAllBytes($TmpFile, $pfxProtectedBytes)
    #[IO.File]::WriteAllBytes("$(CertFile)", $pfxProtectedBytes)
   }

   $Config = Read-ALConfiguration -Path .\ -Password $(UserPwd)
   Write-Host $Config
   $temp = "$(LicenseFile)"
   if ($temp -ne $null)
   {
     $Config | Init-ALEnvironment -Build $True -Password $(UserPwd) -LicenseFile $(LicenseFile)
   }
   else
   {
     $Config | Init-ALEnvironment -Build $True -Password $(UserPwd)
   }

  failOnStderr: true
  displayName: 'Prepare environment'
